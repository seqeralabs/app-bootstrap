import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'io.seqera.java-application-conventions'
    id "io.micronaut.minimal.application" version "4.5.4"
    id "io.micronaut.openapi" version "4.5.4"
    id "com.google.cloud.tools.jib" version "3.4.5"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

String gitVersion() {
    def p = new ProcessBuilder() .command('sh','-c','git rev-parse --short HEAD') .start()
    def r = p.waitFor()
    return r==0 ? p.text.trim() : '(unknown)'
}

group "io.seqera"
version "${rootProject.file('VERSION').text.trim()}"
ext.commitId = gitVersion()

dependencies {
    implementation project(':api')
    
    annotationProcessor 'io.micronaut.validation:micronaut-validation-processor'
    annotationProcessor 'io.micronaut:micronaut-http-validation'
    annotationProcessor 'io.micronaut.data:micronaut-data-processor'
    compileOnly 'io.micronaut:micronaut-inject-groovy'
    compileOnly 'io.micronaut:micronaut-http-validation'
    
    implementation 'jakarta.persistence:jakarta.persistence-api:3.0.0'
    implementation 'io.micronaut:micronaut-http-client'
    implementation 'io.micronaut:micronaut-jackson-databind'
    implementation 'io.micronaut.groovy:micronaut-runtime-groovy'
    implementation 'io.micronaut.reactor:micronaut-reactor'
    implementation 'io.micronaut.reactor:micronaut-reactor-http-client'
    implementation 'jakarta.annotation:jakarta.annotation-api'
    implementation 'io.micronaut.validation:micronaut-validation'
    implementation 'io.micronaut.beanvalidation:micronaut-hibernate-validator'
    implementation 'io.micronaut.security:micronaut-security'
    implementation 'io.micronaut.security:micronaut-security-jwt'
    implementation 'io.micronaut.views:micronaut-views-core'
    implementation 'io.micronaut.views:micronaut-views-thymeleaf'
    implementation 'org.apache.groovy:groovy-json'
    implementation 'org.apache.groovy:groovy-nio'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.squareup.moshi:moshi:1.15.1'
    implementation 'com.squareup.moshi:moshi-adapters:1.15.1'
    implementation 'io.micronaut:micronaut-retry'
    
    // swagger ui via webjars
    implementation 'org.webjars:swagger-ui:5.17.14'
    
    // Micronaut Data JDBC
    implementation 'io.micronaut.data:micronaut-data-jdbc'
    implementation 'io.micronaut.sql:micronaut-jdbc-hikari'
    implementation "io.seqera:migtool:1.8.0"
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2:2.3.232'
    
    // caching deps
    implementation 'io.micronaut.cache:micronaut-cache-core'
    implementation 'io.micronaut.cache:micronaut-cache-caffeine'
    implementation 'io.micronaut.aws:micronaut-aws-parameter-store'
    implementation 'software.amazon.awssdk:ses'
    implementation 'org.yaml:snakeyaml:2.2'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    //object storage dependency
    implementation 'io.micronaut.objectstorage:micronaut-object-storage-aws'
    // include sts to allow the use of service account role - https://stackoverflow.com/a/73306570
    // this sts dependency is require by micronaut-aws-parameter-store,
    // not directly used by the app, for this reason keeping `runtimeOnly`
    runtimeOnly 'software.amazon.awssdk:sts'
    
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:spock'
    testImplementation 'io.micronaut.test:micronaut-test-spock'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'com.h2database:h2'

    // --
    implementation 'ch.qos.logback:logback-classic:1.5.13'

    // monitoring
    implementation 'io.micronaut.micrometer:micronaut-micrometer-core'
    implementation 'io.micronaut.micrometer:micronaut-micrometer-registry-prometheus'
    // Also required to enable endpoint
    implementation 'io.micronaut:micronaut-management'
}

application {
    mainClass.set("io.seqera.app.Application")
}

micronaut {
    version micronautVersion
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("io.seqera.*")
    }
    openapi {
        server(project(':api').file("build/openapi/openapi.yaml")) {
            apiPackageName = "io.seqera.api.spec"
            modelPackageName = "io.seqera.api.model"
            useReactive = false
            useAuth = false
            apiNameSuffix = "ApiSpec"
            additionalProperties = [
                "removeOperationIdPrefix": "true",
                "operationIdCaseFormat": "camelCase",
                "interfaceOnly": "true",
                "dateLibrary": "java8",
                "openApiNullable": "false"
            ]
        }
    }
}

//
// Build container image with JIB
// https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin
//
jib {
    from {
        image = 'cr.seqera.io/public/nf-jdk:corretto-21-al2023-jemalloc'
        platforms {
            platform { architecture = 'amd64'; os = 'linux' }
        }
    }
    to {
        image = findProperty("jibRepo") ?: "cr.seqera.io/public/app:$version"
    }
    container {
        creationTime = "${OffsetDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)}"
        filesModificationTime = "${OffsetDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)}"
        ports = ['8080']
        entrypoint = '/bin/sh'
        args = ['/launch.sh']  // copied from `src/main/jib` directory
        environment = [
                'MICRONAUT_ENVIRONMENTS': 'prod'
        ]
    }
    extraDirectories {
        paths {
            path { from = file('src/main/jib'); }
        }
        permissions = ['/launch.sh': '755']
    }
    allowInsecureRegistries= findProperty("jibRepo")?.toString()?.indexOf('localhost') != -1
}

run{
    def envs = findProperty('micronautEnvs')
    def args = ["-Dmicronaut.environments=$envs"]
    if( environment['JVM_OPTS'] ) args.add(environment['JVM_OPTS'])
    jvmArgs args
}

/** Update version number for backend app and modules */
task buildInfo { doLast {
    def info = """\
                name=${project.name}
                group=${project.group}
                version=${version}
                commitId=${project.property('commitId')}
            """.stripIndent().toString()
    def f = file("${buildDir}/resources/main/META-INF/build-info.properties")
    f.parentFile.mkdirs()
    f.text = info
} }
buildInfo.dependsOn processResources
compileGroovy.dependsOn buildInfo

// Swagger UI Generation
tasks.register('generateSwaggerUI') {
    group = 'documentation'
    description = 'Generate Swagger UI using WebJars'
    dependsOn project(':api').tasks.named('generateOpenApi')
    
    doLast {
        def resourcesDir = file('src/main/resources/public/openapi')
        def version = file('../VERSION').text.trim()
        
        // Clean and create directory
        resourcesDir.deleteDir()
        resourcesDir.mkdirs()
        
        // Copy OpenAPI specs with versioning (YAML only) from API project
        copy {
            from project(':api').file('build/openapi/openapi.yaml')
            into resourcesDir
            rename 'openapi.yaml', 'openapi-latest.yaml'
        }
        
        copy {
            from project(':api').file('build/openapi/openapi.yaml')
            into resourcesDir
            rename 'openapi.yaml', "openapi-${version}.yaml"
        }
        
        // Generate index.html from template
        def templateFile = file('src/main/resources/swagger-ui-template.html')
        def indexHtml = file("${resourcesDir}/index.html")
        
        def templateContent = templateFile.text
        def processedContent = templateContent.replace('${PROJECT_VERSION}', version)
        
        indexHtml.text = processedContent
    }
    
    inputs.files(project(':api').file('build/openapi/openapi.yaml'), 'src/main/resources/swagger-ui-template.html', '../VERSION')
    outputs.dir('src/main/resources/public/openapi')
}

// Wire Swagger UI generation into build process
processResources.dependsOn generateSwaggerUI
tasks.named('inspectRuntimeClasspath') {
    dependsOn generateSwaggerUI
}

// API Code Generation Tasks
tasks.register('generateApiCode') {
    group = 'code generation'
    description = 'Copy generated API interfaces and copy model classes to API project'
    dependsOn 'generateServerOpenApiModels', 'generateServerOpenApiApis'
    
    doFirst {
        // Clean existing generated files in app
        delete fileTree('src/main/java/io/seqera/api/spec') { include '**/*.java' }
        // Clean existing generated files in API project
        delete fileTree(project(':api').file('src/main/java/io/seqera/api/model')) { include '**/*.java' }
    }
    
    doLast {
        // Copy spec interfaces to app project (stay here)
        copy {
            from 'build/generated/openapi/generateServerOpenApiApis/src/main/java/io/seqera/api/spec'
            into 'src/main/java/io/seqera/api/spec'
            include '**/*.java'
        }
        
        // Copy model classes to API project (they belong there)
        copy {
            from 'build/generated/openapi/generateServerOpenApiModels/src/main/java/io/seqera/api/model'
            into project(':api').file('src/main/java/io/seqera/api/model')
            include '**/*.java'
        }
        
        logger.info("Copied generated API spec interfaces to app and model classes to API project")
    }
}

// Ensure OpenAPI generation happens before server code generation
generateServerOpenApiModels.dependsOn project(':api').tasks.named('generateOpenApi')
generateServerOpenApiApis.dependsOn project(':api').tasks.named('generateOpenApi')

// Make sure generated code is available for compilation
tasks.named('compileJava') {
    dependsOn 'generateSwaggerUI', project(':api').tasks.named('compileJava')
}

// Exclude generated files from the build directory to avoid duplicates
configurations.all {
    exclude group: 'build.generated.openapi'
}

tasks.withType(JavaCompile) {
    exclude '**/build/generated/**'
}

// Remove generated sources from source sets to avoid duplicates
afterEvaluate {
    sourceSets.main.java.srcDirs = sourceSets.main.java.srcDirs.findAll { srcDir ->
        !srcDir.toString().contains('build/generated')
    }
}

// Handle duplicate OpenAPI files
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
