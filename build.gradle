import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

plugins {
    id("groovy")
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "io.micronaut.minimal.application" version "4.1.1"
    id "com.google.cloud.tools.jib" version "3.4.2"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

String gitVersion() {
    def p = new ProcessBuilder() .command('sh','-c','git rev-parse --short HEAD') .start()
    def r = p.waitFor()
    return r==0 ? p.text.trim() : '(unknown)'
}

group "io.seqera"
version "${rootProject.file('VERSION').text.trim()}"
ext.commitId = gitVersion()

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'io.micronaut.validation:micronaut-validation-processor'
    annotationProcessor 'io.micronaut:micronaut-http-validation'
    compileOnly 'io.micronaut.data:micronaut-data-processor'
    compileOnly 'io.micronaut:micronaut-inject-groovy'
    compileOnly 'io.micronaut:micronaut-http-validation'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.0.0'
    implementation 'io.micronaut:micronaut-http-client'
    implementation 'io.micronaut:micronaut-jackson-databind'
    implementation 'io.micronaut.groovy:micronaut-runtime-groovy'
    implementation 'io.micronaut.reactor:micronaut-reactor'
    implementation 'io.micronaut.reactor:micronaut-reactor-http-client'
    implementation 'jakarta.annotation:jakarta.annotation-api'
    implementation 'io.micronaut.validation:micronaut-validation'
    implementation 'io.micronaut.security:micronaut-security'
    implementation 'io.micronaut:micronaut-websocket'
    implementation 'org.apache.groovy:groovy-json'
    implementation 'org.apache.groovy:groovy-nio'
    implementation 'com.google.guava:guava:33.3.1-jre'
    implementation 'io.micronaut.reactor:micronaut-reactor'
    implementation 'io.micronaut.reactor:micronaut-reactor-http-client'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.squareup.moshi:moshi:1.15.1'
    implementation 'com.squareup.moshi:moshi-adapters:1.15.1'
    implementation 'io.micronaut:micronaut-retry'
    // caching deps
    implementation 'io.micronaut.cache:micronaut-cache-core'
    implementation 'io.micronaut.cache:micronaut-cache-caffeine'
    implementation 'io.micronaut.aws:micronaut-aws-parameter-store'
    implementation 'software.amazon.awssdk:ses'
    implementation 'org.yaml:snakeyaml:2.2'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    //object storage dependency
    implementation 'io.micronaut.objectstorage:micronaut-object-storage-aws'
    // include sts to allow the use of service account role - https://stackoverflow.com/a/73306570
    // this sts dependency is require by micronaut-aws-parameter-store,
    // not directly used by the app, for this reason keeping `runtimeOnly`
    runtimeOnly 'software.amazon.awssdk:sts'
    runtimeOnly 'io.netty:netty-tcnative-boringssl-static:2.0.0.Final'
    runtimeOnly 'javax.xml.bind:jaxb-api:2.3.1'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:mysql:1.17.3'

    // --
    implementation 'ch.qos.logback:logback-classic:1.5.13'

    // monitoring
    implementation 'io.micronaut.micrometer:micronaut-micrometer-core'
    implementation 'io.micronaut.micrometer:micronaut-micrometer-registry-prometheus'
    // Also required to enable endpoint
    implementation 'io.micronaut:micronaut-management'
}


application {
    mainClass.set("io.seqera.app.Application")
}

java {
    // these settings apply to all jvm tooling, including groovy
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = 17
    targetCompatibility = 17
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("io.seqera.*")
    }
}

//
// Build container image with JIB
// https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin
//
jib {
    from {
        image = 'cr.seqera.io/public/nf-jdk:corretto-21-al2023-jemalloc'
        platforms {
            platform { architecture = 'amd64'; os = 'linux' }
        }
    }
    to {
        image = findProperty("jibRepo") ?: "cr.seqera.io/public/app:$version"
    }
    container {
        creationTime = "${OffsetDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)}"
        filesModificationTime = "${OffsetDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)}"
        ports = ['8080']
        entrypoint = '/bin/sh'
        args = ['/launch.sh']  // copied from `src/main/jib` directory
        environment = [
                'MICRONAUT_ENVIRONMENTS': 'prod'
        ]
    }
    extraDirectories {
        paths {
            path { from = file('src/main/jib'); }
        }
        permissions = ['/launch.sh': '755']
    }
    allowInsecureRegistries= findProperty("jibRepo")?.toString()?.indexOf('localhost') != -1
}

run{
    def envs = findProperty('micronautEnvs')
    def args = ["-Dmicronaut.environments=$envs"]
    if( environment['JVM_OPTS'] ) args.add(environment['JVM_OPTS'])
    jvmArgs args
}


/** Update version number for backend app and modules */
task buildInfo { doLast {
    def info = """\
                name=${project.name}
                group=${project.group}
                version=${version}
                commitId=${project.property('commitId')}
            """.stripIndent().toString()
    def f = file("${buildDir}/resources/main/META-INF/build-info.properties")
    f.parentFile.mkdirs()
    f.text = info
} }
buildInfo.dependsOn processResources
compileGroovy.dependsOn buildInfo
